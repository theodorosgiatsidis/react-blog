{"ast":null,"code":"var _jsxFileName = \"/Users/thodorosgiatsidis/Documents/GitHub/react-blog/client/src/Components/paginate/Pagination.js\",\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { StoreContext } from \"../../store\";\nimport Post from \"../Post/Post\"; // Example items, to simulate fetching from another resources.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Items({\n  currentItems\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n\n_c = Items;\n\nfunction Pagination({\n  itemsPerPage\n}) {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(_s(() => {\n    _s();\n\n    // Fetch items from another resources.\n    const state = useContext(StoreContext);\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(state.posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(state.posts.length / itemsPerPage));\n  }, \"kdLImxeHm3898p7tqgy8Fclg5s8=\"), [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = e => {\n    _s2();\n\n    const state = useContext(StoreContext);\n    const newOffset = e.selected * itemsPerPage % state.posts.length;\n    console.log(`User requested page number ${e.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  _s2(handlePageClick, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(Pagination, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c2 = Pagination;\nexport default Pagination;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"Pagination\");","map":{"version":3,"sources":["/Users/thodorosgiatsidis/Documents/GitHub/react-blog/client/src/Components/paginate/Pagination.js"],"names":["React","useEffect","useState","useContext","ReactPaginate","StoreContext","Post","Items","currentItems","map","item","Pagination","itemsPerPage","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","state","endOffset","console","log","posts","slice","Math","ceil","length","handlePageClick","e","newOffset","selected"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAOC,IAAP,MAAiB,cAAjB,C,CAEA;;;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAiC;AAC/B,sBACE;AAAA,cACGA,YAAY,IACXA,YAAY,CAACC,GAAb,CAAkBC,IAAD,iBACf;AAAA,6BACE;AAAA,6BAAWA,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAFJ,mBADF;AAUD;;KAXQH,K;;AAaT,SAASI,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAsC;AAAA;;AAAA;AAAA;;AACpC;AACA,QAAM,CAACJ,YAAD,EAAeK,eAAf,IAAkCX,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,CAAD,CAA1C,CAHoC,CAIpC;AACA;;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,CAAD,CAA5C;AAEAD,EAAAA,SAAS,IAAC,MAAM;AAAA;;AACd;AACA,UAAMiB,KAAK,GAAGf,UAAU,CAACE,YAAD,CAAxB;AACA,UAAMc,SAAS,GAAGH,UAAU,GAAGJ,YAA/B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBL,UAAW,OAAMG,SAAU,EAA7D;AACAN,IAAAA,eAAe,CAACK,KAAK,CAACI,KAAN,CAAYC,KAAZ,CAAkBP,UAAlB,EAA8BG,SAA9B,CAAD,CAAf;AACAJ,IAAAA,YAAY,CAACS,IAAI,CAACC,IAAL,CAAUP,KAAK,CAACI,KAAN,CAAYI,MAAZ,GAAqBd,YAA/B,CAAD,CAAZ;AACD,GAPQ,mCAON,CAACI,UAAD,EAAaJ,YAAb,CAPM,CAAT,CARoC,CAiBpC;;AACA,QAAMe,eAAe,GAAIC,CAAD,IAAO;AAAA;;AAC7B,UAAMV,KAAK,GAAGf,UAAU,CAACE,YAAD,CAAxB;AACA,UAAMwB,SAAS,GAAID,CAAC,CAACE,QAAF,GAAalB,YAAd,GAA8BM,KAAK,CAACI,KAAN,CAAYI,MAA5D;AACAN,IAAAA,OAAO,CAACC,GAAR,CACG,8BAA6BO,CAAC,CAACE,QAAS,qBAAoBD,SAAU,EADzE;AAGAZ,IAAAA,aAAa,CAACY,SAAD,CAAb;AACD,GAPD;;AAlBoC,MAkB9BF,eAlB8B;;AA2BpC,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,YAAY,EAAEnB;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AACE,MAAA,UAAU,EAAC,KADb;AAEE,MAAA,SAAS,EAAC,QAFZ;AAGE,MAAA,YAAY,EAAEmB,eAHhB;AAIE,MAAA,kBAAkB,EAAE,CAJtB;AAKE,MAAA,SAAS,EAAEb,SALb;AAME,MAAA,aAAa,EAAC,YANhB;AAOE,MAAA,qBAAqB,EAAE;AAPzB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAcD;;IAzCQH,U;;MAAAA,U;AA0CT,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { StoreContext } from \"../../store\";\nimport Post from \"../Post/Post\";\n\n// Example items, to simulate fetching from another resources.\n\nfunction Items({ currentItems }) {\n  return (\n    <>\n      {currentItems &&\n        currentItems.map((item) => (\n          <div>\n            <h3>Item #{item}</h3>\n          </div>\n        ))}\n    </>\n  );\n}\n\nfunction Pagination({ itemsPerPage }) {\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const state = useContext(StoreContext);\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(state.posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(state.posts.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (e) => {\n    const state = useContext(StoreContext);\n    const newOffset = (e.selected * itemsPerPage) % state.posts.length;\n    console.log(\n      `User requested page number ${e.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n      <Items currentItems={currentItems} />\n      <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        renderOnZeroPageCount={null}\n      />\n    </>\n  );\n}\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}