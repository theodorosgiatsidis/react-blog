{"ast":null,"code":"var _jsxFileName = \"/Users/thodorosgiatsidis/react-blog/client/src/Pages/post/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"react-router\";\nimport { StoreContext } from \"../../context/store\";\nimport \"./post.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post() {\n  _s();\n\n  const location = useLocation();\n  const path = location.pathname.split(\"/\")[2];\n  const [post, setPost] = useState(null);\n  const {\n    posts,\n    setPosts\n  } = useContext(StoreContext);\n  const {\n    id\n  } = useParams();\n  const PF = \"http://localhost:5000/images/\";\n  const {\n    user\n  } = useContext(StoreContext);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n  useEffect(() => {\n    getPost();\n  }, []);\n\n  const getPost = async () => {\n    try {\n      const savedPost = posts.find(p => p._id === id);\n\n      if (savedPost) {\n        setPost(savedPost);\n      } else {\n        const res = await axios.get(`/posts/${id}`);\n        setPost(res.data);\n        setTitle(res.data.title);\n        setDesc(res.data.description);\n      }\n    } catch (error) {}\n  };\n\n  const handleDelete = async () => {\n    try {\n      await axios.delete(\"/posts/\" + path, {\n        username: user.username\n      });\n      window.location.replace(\"/\");\n    } catch (error) {}\n  };\n\n  return post ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-wrapper\",\n    children: [updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: title,\n      autoFocus: true,\n      onChange: e => setTitle(e.target.value),\n      className: \"title-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"desc-input\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"singlePostButton\",\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-post\",\n      src: PF + post.picture,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"userName\",\n      style: {\n        color: \"coral\",\n        margin: \"10px\"\n      },\n      children: [\"Author: \", post.user.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"singlePostDate\",\n      style: {\n        color: \"GrayText\"\n      },\n      children: new Date(post.createdAt).toDateString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), post.user.username === (user === null || user === void 0 ? void 0 : user.username) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"singlePostEdit\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"singlePostIcon fas fa-edit\",\n        onClick: () => setUpdateMode(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"singlePostIcon far fa-trash-alt\",\n        onClick: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this) : null;\n}\n\n_s(Post, \"ld8D8sYN1XkWiJY1HrlRwTYsf0E=\", false, function () {\n  return [useLocation, useParams];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/thodorosgiatsidis/react-blog/client/src/Pages/post/Post.js"],"names":["React","useContext","useEffect","useState","useParams","useLocation","StoreContext","axios","Post","location","path","pathname","split","post","setPost","posts","setPosts","id","PF","user","title","setTitle","description","setDescription","updateMode","setUpdateMode","getPost","savedPost","find","p","_id","res","get","data","setDesc","error","handleDelete","delete","username","window","replace","e","target","value","picture","color","margin","Date","createdAt","toDateString"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"react-router\";\nimport { StoreContext } from \"../../context/store\";\nimport \"./post.css\";\nimport axios from \"axios\";\n\nfunction Post() {\n  const location = useLocation();\n  const path = location.pathname.split(\"/\")[2];\n  const [post, setPost] = useState(null);\n  const { posts, setPosts } = useContext(StoreContext);\n  const { id } = useParams();\n  const PF = \"http://localhost:5000/images/\";\n  const { user } = useContext(StoreContext);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n\n  useEffect(() => {\n    getPost();\n  }, []);\n\n  const getPost = async () => {\n    try {\n      const savedPost = posts.find((p) => p._id === id);\n      if (savedPost) {\n        setPost(savedPost);\n      } else {\n        const res = await axios.get(`/posts/${id}`);\n        setPost(res.data);\n        setTitle(res.data.title);\n        setDesc(res.data.description);\n      }\n    } catch (error) {}\n  };\n\n  const handleDelete = async () => {\n    try {\n      await axios.delete(\"/posts/\" + path, {\n        username: user.username,\n      });\n      window.location.replace(\"/\");\n    } catch (error) {}\n  };\n\n  return post ? (\n    <div className=\"post-wrapper\">\n      {updateMode ? (\n        <input\n          type=\"text\"\n          value={title}\n          autoFocus\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"title-input\"\n        />\n      ) : (\n        <h1>{post.title}</h1>\n      )}\n      {updateMode ? (\n        <textarea\n          className=\"desc-input\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n      ) : (\n        <p>{post.description}</p>\n      )}\n      <button className=\"singlePostButton\">Update</button>\n      <img className=\"img-post\" src={PF + post.picture} alt=\"\" />\n      <p className=\"userName\" style={{ color: \"coral\", margin: \"10px\" }}>\n        Author: {post.user.username}\n      </p>\n      <p className=\"singlePostDate\" style={{ color: \"GrayText\" }}>\n        {new Date(post.createdAt).toDateString()}\n      </p>\n      {post.user.username === user?.username && (\n        <div className=\"singlePostEdit\">\n          <i\n            className=\"singlePostIcon fas fa-edit\"\n            onClick={() => setUpdateMode(true)}\n          ></i>\n          <i\n            className=\"singlePostIcon far fa-trash-alt\"\n            onClick={handleDelete}\n          ></i>\n        </div>\n      )}\n    </div>\n  ) : null;\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}