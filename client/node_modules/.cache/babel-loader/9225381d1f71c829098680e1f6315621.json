{"ast":null,"code":"var _jsxFileName = \"/Users/thodorosgiatsidis/Documents/GitHub/react-blog/client/src/Components/paginate/Pagination.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { StoreContext } from \"../../store\"; // Example items, to simulate fetching from another resources.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst state = useContext(StoreContext);\n\nfunction Pagination({\n  itemsPerPage\n}) {\n  _s();\n\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(state.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Pagination, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["/Users/thodorosgiatsidis/Documents/GitHub/react-blog/client/src/Components/paginate/Pagination.js"],"names":["React","useEffect","useState","useContext","ReactPaginate","StoreContext","state","Pagination","itemsPerPage","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","items","length","handlePageClick","event","newOffset","selected"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,YAAT,QAA6B,aAA7B,C,CAEA;;;;AACA,MAAMC,KAAK,GAAGH,UAAU,CAACE,YAAD,CAAxB;;AAEA,SAASE,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAsC;AAAA;;AACpC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,CAAD,CAA1C,CAHoC,CAIpC;AACA;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,CAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMc,SAAS,GAAGF,UAAU,GAAGL,YAA/B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBJ,UAAW,OAAME,SAAU,EAA7D;AACAL,IAAAA,eAAe,CAACJ,KAAK,CAACY,KAAN,CAAYL,UAAZ,EAAwBE,SAAxB,CAAD,CAAf;AACAH,IAAAA,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUC,KAAK,CAACC,MAAN,GAAed,YAAzB,CAAD,CAAZ;AACD,GANQ,EAMN,CAACK,UAAD,EAAaL,YAAb,CANM,CAAT,CARoC,CAgBpC;;AACA,QAAMe,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBlB,YAAlB,GAAkCa,KAAK,CAACC,MAA1D;AACAN,IAAAA,OAAO,CAACC,GAAR,CACG,8BAA6BO,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;AAGAX,IAAAA,aAAa,CAACW,SAAD,CAAb;AACD,GAND;;AAQA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,YAAY,EAAEhB;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AACE,MAAA,UAAU,EAAC,KADb;AAEE,MAAA,SAAS,EAAC,QAFZ;AAGE,MAAA,YAAY,EAAEc,eAHhB;AAIE,MAAA,kBAAkB,EAAE,CAJtB;AAKE,MAAA,SAAS,EAAEZ,SALb;AAME,MAAA,aAAa,EAAC,YANhB;AAOE,MAAA,qBAAqB,EAAE;AAPzB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAcD;;GAvCQJ,U;;KAAAA,U;AAwCT,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { StoreContext } from \"../../store\";\n\n// Example items, to simulate fetching from another resources.\nconst state = useContext(StoreContext);\n\nfunction Pagination({ itemsPerPage }) {\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(state.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % items.length;\n    console.log(\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n      <Items currentItems={currentItems} />\n      <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        renderOnZeroPageCount={null}\n      />\n    </>\n  );\n}\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}